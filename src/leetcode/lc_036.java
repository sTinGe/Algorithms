package leetcode;

import java.util.HashSet;
import java.util.Set;

public class lc_036 {
    public boolean isValidSudoku(char[][] board) {
        for(int i = 0; i<9; i++){
            System.out.println("");
            Set<Character> rows = new HashSet<Character>();
            Set<Character> columns = new HashSet<Character>();
            Set<Character> cube = new HashSet<Character>();
            for (int j = 0; j < 9;j++){
                if(board[i][j]!='.' && !rows.add(board[i][j]))
                    return false;
                if(board[j][i]!='.' && !columns.add(board[j][i]))
                    return false;
                int RowIndex = 3*(i/3);
                int ColIndex = 3*(i%3);
                System.out.println("i:"+i+", j:"+j+" -> ("+(RowIndex + j/3)+", "+(ColIndex + j%3)+")");
                System.out.println( board[RowIndex + j/3][ColIndex + j%3]);
                if(board[RowIndex + j/3][ColIndex + j%3]!='.' && !cube.add(board[RowIndex + j/3][ColIndex + j%3])) {
                    return false;
                }
                System.out.println("");
            }
        }
        return true;
    }
    
    public void run() {
        char[][] board = new char[][]{
                {'.','.','.', '.','5','.', '.','1','.'}, 
                {'.','4','.', '3','.','.', '.','.','.'},
                {'.','.','.', '.','.','.', '.','.','9'},
                
                {'8','.','.', '.','.','.', '.','2','.'},
                {'.','.','2', '.','7','.', '.','.','.'},
                {'.','1','5', '.','.','.', '.','.','.'},
                
                {'.','.','.', '.','.','2', '.','.','.'},
                {'.','2','.', '9','.','.', '.','.','.'},
                {'.','.','4', '.','.','.', '.','.','.'},
        };
        //
        // [
        // ['.','.','4', '.','.','.', '6','3','.'],
        // ['.','.','.', '.','.','.', '.','.','.'],
        // ['5','.','.', '.','.','.', '.','9','.'],

        // ['.','.','.', '5','6','.', '.','.','.'],
        // ['4','.','3', '.','.','.', '.','.','1'],
        // ['.','.','.', '7','.','.', '.','.','.'],
        // ['.','.','.', '5','.','.', '.','.','.'],
        // ['.','.','.', '.','.','.', '.','.','.'],
        // ['.','.','.', '.','.','.', '.','.','.']]


        //
        // [
        // ['.','.','.', '.','5','.', '.','1','.'],
        // ['.','4','.', '3','.','.', '.','.','.'],
        // ['.','.','.', '.','.','3', '.','.','1'],

        // ['8','.','.', '.','.','.', '.','2','.'],
        // ['.','.','2', '.','7','.', '.','.','.'],
        // ['.','1','5', '.','.','.', '.','.','.'],

        // ['.','.','.', '.','.','2', '.','.','.'],
        // ['.','2','.', '9','.','.', '.','.','.'],
        // ['.','.','4', '.','.','.', '.','.','.']]
        System.out.println(isValidSudoku(board));
    }

}
